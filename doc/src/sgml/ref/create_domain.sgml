<!--
doc/src/sgml/ref/create_domain.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEDOMAIN">
 <indexterm zone="sql-createdomain">
  <primary>CREATE DOMAIN</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE DOMAIN</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE DOMAIN</refname>
<!--
  <refpurpose>define a new domain</refpurpose>
-->
  <refpurpose>新しいドメインを定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE DOMAIN <replaceable class="parameter">name</replaceable> [ AS ] <replaceable class="parameter">data_type</replaceable>
    [ COLLATE <replaceable>collation</replaceable> ]
    [ DEFAULT <replaceable>expression</replaceable> ]
    [ <replaceable class="PARAMETER">constraint</replaceable> [ ... ] ]

<!--
<phrase>where <replaceable class="PARAMETER">constraint</replaceable> is:</phrase>
-->
<phrase>ここで<replaceable class="PARAMETER">constraint</replaceable>は、以下の通りです。</phrase>

[ CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> ]
{ NOT NULL | NULL | CHECK (<replaceable class="PARAMETER">expression</replaceable>) }
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CREATE DOMAIN</command> creates a new domain.  A domain is
   essentially a data type with optional constraints (restrictions on
   the allowed set of values).
   The user who defines a domain becomes its owner.
-->
<command>CREATE DOMAIN</command>は新しいドメインを作成します。
ドメインとは本質的には、特別な制約（使用可能な値集合に対する制限）を持ったデータ型です。
ドメインを定義したユーザが、その所有者となります。
  </para>

  <para>
<!--
   If a schema name is given (for example, <literal>CREATE DOMAIN
   myschema.mydomain ...</>) then the domain is created in the
   specified schema.  Otherwise it is created in the current schema.
   The domain name must be unique among the types and domains existing
   in its schema.
-->
スキーマ名が付けられている場合（例えば、<literal>CREATE DOMAIN myschema.mydomain ...</>）、ドメインは指定されたスキーマに作成されます。
スキーマ名が付けられていなければ、そのドメインは現在のスキーマに作成されます。
ドメイン名は、そのスキーマ内に存在するデータ型およびドメインの間で、一意である必要があります。
  </para>

  <para>
<!--
   Domains are useful for abstracting common constraints on fields into
   a single location for maintenance.  For example, several tables might
   contain email address columns, all requiring the same CHECK constraint
   to verify the address syntax.
   Define a domain rather than setting up each table's constraint
   individually.
-->
ドメインを使用すると、共通な制約を1箇所に抽象化でき、メンテナンスに便利です。
たとえば、E-mailアドレスを格納する列が複数のテーブルで使用されていて、アドレス構文の検証のためすべてが同一のCHECK制約を必要としているような場合です。
このような場合、各テーブルに個別に制約を設定するよりも、ドメインを定義してください。
  </para>

  <para>
<!--
   To be able to create a domain, you must have <literal>USAGE</literal>
   privilege on the underlying type.
-->
ドメインを作成するためには、基となる型に対する<literal>USAGE</literal>を持たなければなりません。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
<!--
        The name (optionally schema-qualified) of a domain to be created.
-->
作成するドメインの名前です（スキーマ修飾名でも可）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="PARAMETER">data_type</replaceable></term>
      <listitem>
       <para>
<!--
        The underlying data type of the domain. This can include array
        specifiers.
-->
ドメインの基となるデータ型です。
配列指定子を含めることができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable>collation</replaceable></term>
      <listitem>
       <para>
<!--
        An optional collation for the domain.  If no collation is
        specified, the underlying data type's default collation is used.
        The underlying type must be collatable if <literal>COLLATE</>
        is specified.
-->
ドメインの照合順(省略可能)です。
照合順序の指定がなければ基となるデータ型のデフォルトの照合順序が使用されます。
<literal>COLLATE</>が指定される場合、基となる型は照合順序が設定可能な型でなければなりません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>DEFAULT <replaceable>expression</replaceable></literal></term>

      <listitem>
       <para>
<!--
        The <literal>DEFAULT</> clause specifies a default value for
        columns of the domain data type.  The value is any
        variable-free expression (but subqueries are not allowed).
        The data type of the default expression must match the data
        type of the domain.  If no default value is specified, then
        the default value is the null value.
-->
<literal>DEFAULT</>句は、ドメインデータ型の列のデフォルト値を指定します。
任意の無変数式を値とすることができます（ただし、副問い合わせは許可されません）。
デフォルト式のデータ型は、そのドメインのデータ型と一致する必要があります。
デフォルト値が指定されない場合、デフォルト値はNULL値となります。
       </para>

       <para>
<!--
        The default expression will be used in any insert operation
        that does not specify a value for the column.  If a default
        value is defined for a particular column, it overrides any
        default associated with the domain.  In turn, the domain
        default overrides any default value associated with the
        underlying data type.
-->
デフォルト式は、挿入操作において該当する列に値が指定されなかった場合に使用されます。
特定の列に対してデフォルト値が定義されている場合、それはドメインに関連するデフォルト値より優先します。
反対に、基となるデータ型に関連するデフォルト値より、ドメインのデフォルト値が優先します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable></literal></term>
      <listitem>
       <para>
<!--
        An optional name for a constraint.  If not specified,
        the system generates a name.
-->
制約の名前（省略可能）です。
指定されなければ、システムが名前を生成します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NOT NULL</></term>
      <listitem>
       <para>
<!--
        Values of this domain are prevented from being null
        (but see notes below).
-->
このドメインの値としてNULLの使用を禁止します（ただし、以下の注釈を参照してください）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULL</></term>
      <listitem>
       <para>
<!--
        Values of this domain are allowed to be null.  This is the default.
-->
ドメインの値としてNULLの使用を許可します。
こちらがデフォルトです。
       </para>

       <para>
<!--
        This clause is only intended for compatibility with
        nonstandard SQL databases.  Its use is discouraged in new
        applications.
-->
この句は非標準的なSQLデータベースとの互換性を持つためだけに用意されています。
新しいアプリケーションでこの句を使用するのはお勧めできません。
       </para>
      </listitem>
     </varlistentry>

   <varlistentry>
    <term><literal>CHECK (<replaceable class="PARAMETER">expression</replaceable>)</literal></term>
    <listitem>
<!--
     <para><literal>CHECK</> clauses specify integrity constraints or tests
      which values of the domain must satisfy.
      Each constraint must be an expression
      producing a Boolean result.  It should use the key word <literal>VALUE</>
      to refer to the value being tested.  Expressions evaluating
      to TRUE or UNKNOWN succeed.  If the expression produces a FALSE result,
      an error is reported and the value is not allowed to be converted
      to the domain type.
-->
<para><literal>CHECK</>句は、ドメインの値が満たさなければならない整合性制約や検査を指定します。
各制約は、Boolean型の結果を生成する式である必要があります。
検査される値を参照するには、<literal>VALUE</>というキーワードを使用すべきです。
TRUEまたはUNKNOWNとして評価される式は成功します。
式の結果がFALSEになった場合、エラーが報告され、値はドメイン型に変換することができません。
     </para>

     <para>
<!--
      Currently, <literal>CHECK</literal> expressions cannot contain
      subqueries nor refer to variables other than <literal>VALUE</>.
-->
現時点では、<literal>CHECK</>式に副問い合わせを含めたり、<literal>VALUE</>以外の変数を参照したりすることはできません。
     </para>

     <para>
<!--
      When a domain has multiple <literal>CHECK</literal> constraints,
      they will be tested in alphabetical order by name.
      (<productname>PostgreSQL</> versions before 9.5 did not honor any
      particular firing order for <literal>CHECK</literal> constraints.)
-->
ドメインに複数の<literal>CHECK</literal>制約がある場合、それらは名前のアルファベット順に評価されます。
（<productname>PostgreSQL</>の9.5より前のバージョンでは、複数の<literal>CHECK</literal>制約がある場合について、特定の実行順序がありませんでした。）
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   Domain constraints, particularly <literal>NOT NULL</>, are checked when
   converting a value to the domain type.  It is possible for a column that
   is nominally of the domain type to read as null despite there being such
   a constraint.  For example, this can happen in an outer-join query, if
   the domain column is on the nullable side of the outer join.  A more
   subtle example is
-->
ドメイン制約、特に<literal>NOT NULL</>は、値がドメイン型に変換されるときに検査されます。
通常はドメイン型である列が、NOT NULLの制約にも関わらずNULLとして読み出される場合もあり得ます。
例えば、外部結合の問い合わせにおいて、ドメインの列が外部結合のNULLになる側にあるときに、これが起こり得ます。
より微妙な例は以下です。
<programlisting>
INSERT INTO tab (domcol) VALUES ((SELECT domcol FROM tab WHERE false));
</programlisting>
<!--
   The empty scalar sub-SELECT will produce a null value that is considered
   to be of the domain type, so no further constraint checking is applied
   to it, and the insertion will succeed.
-->
空でスカラーの副問い合わせにより、ドメイン型であると見なされるNULL値が生成されます。
そのため、制約についてこれ以上の検証は行われず、挿入は成功します。
  </para>

  <para>
<!--
   It is very difficult to avoid such problems, because of SQL's general
   assumption that a null value is a valid value of every data type.  Best practice
   therefore is to design a domain's constraints so that a null value is allowed,
   and then to apply column <literal>NOT NULL</> constraints to columns of
   the domain type as needed, rather than directly to the domain type.
-->
SQLではNULL値はすべてのデータ型で有効な値であると想定されているため、このような問題を回避するのは非常に難しいことです。
したがって、最善の方法は、<literal>NOT NULL</>制約をドメイン型に直接適用するのではなく、NULL値が許されるようにドメインの制約を設計し、その上で、列の<literal>NOT NULL</>制約を、必要に応じて、ドメイン型の列に適用することです。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   This example creates the <type>us_postal_code</type> data type and
   then uses the type in a table definition.  A regular expression test
   is used to verify that the value looks like a valid US postal code:
-->
この例では、データ型<type>us_postal_code</type>を作成し、その型をテーブル定義の中で使用します。
データが有効なUS郵便番号であるかどうかを検証するために正規表現検査が使用されます。

<programlisting>
CREATE DOMAIN us_postal_code AS TEXT
CHECK(
   VALUE ~ '^\d{5}$'
OR VALUE ~ '^\d{5}-\d{4}$'
);

CREATE TABLE us_snail_addy (
  address_id SERIAL PRIMARY KEY,
  street1 TEXT NOT NULL,
  street2 TEXT,
  street3 TEXT,
  city TEXT NOT NULL,
  postal us_postal_code NOT NULL
);
</programlisting></para>
 </refsect1>

 <refsect1 id="SQL-CREATEDOMAIN-compatibility">
<!--
  <title>Compatibility</title>
-->
<title>互換性</title>

  <para>
<!--
   The command <command>CREATE DOMAIN</command> conforms to the SQL
   standard.
-->
<command>CREATE DOMAIN</command>コマンドは標準SQLに準拠しています。
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATEDOMAIN-see-also">
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterdomain"></member>
   <member><xref linkend="sql-dropdomain"></member>
  </simplelist>
 </refsect1>

</refentry>
