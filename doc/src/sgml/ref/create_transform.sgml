<!-- doc/src/sgml/ref/create_transform.sgml -->

<refentry id="SQL-CREATETRANSFORM">
 <indexterm zone="sql-createtransform">
  <primary>CREATE TRANSFORM</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE TRANSFORM</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
  <refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TRANSFORM</refname>
<!--
  <refpurpose>define a new transform</refpurpose>
-->
  <refpurpose>新しい変換を定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ OR REPLACE ] TRANSFORM FOR <replaceable>type_name</replaceable> LANGUAGE <replaceable>lang_name</replaceable> (
    FROM SQL WITH FUNCTION <replaceable>from_sql_function_name</replaceable> (<replaceable>argument_type</replaceable> [, ...]),
    TO SQL WITH FUNCTION <replaceable>to_sql_function_name</replaceable> (<replaceable>argument_type</replaceable> [, ...])
);
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createtransform-description">
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CREATE TRANSFORM</command> defines a new transform.
   <command>CREATE OR REPLACE TRANSFORM</command> will either create a new
   transform, or replace an existing definition.
-->
<command>CREATE TRANSFORM</command>は新しい変換を定義します。
<command>CREATE OR REPLACE TRANSFORM</command>は新しい変換を作成するか、あるいは既存の変換を置換します。
  </para>

  <para>
<!--
   A transform specifies how to adapt a data type to a procedural language.
   For example, when writing a function in PL/Python using
   the <type>hstore</type> type, PL/Python has no prior knowledge how to
   present <type>hstore</type> values in the Python environment.  Language
   implementations usually default to using the text representation, but that
   is inconvenient when, for example, an associative array or a list would be
   more appropriate.
-->
変換はデータ型を手続き言語にどのように適合させるかを定義します。
例えば<type>hstore</type>型を使ってPL/Pythonの関数を書くとき、PL/Pythonは<type>hstore</type>の値をPythonの環境でどのように表現するか、事前の知識がありません。
言語の実装は通常、デフォルトでテキスト表現を使いますが、これは例えば連想配列やリストの方がより適切な場合には不便です。
  </para>

  <para>
<!--
   A transform specifies two functions:
-->
変換では次の2つの関数を指定します。
   <itemizedlist>
    <listitem>
     <para>
<!--
      A <quote>from SQL</quote> function that converts the type from the SQL
      environment to the language.  This function will be invoked on the
      arguments of a function written in the language.
-->
<quote>from SQL</quote>関数では、型をSQL環境から言語へと変換します。
この関数は、その言語で記述された関数の引数で呼び出されます。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      A <quote>to SQL</quote> function that converts the type from the
      language to the SQL environment.  This function will be invoked on the
      return value of a function written in the language.
-->
<quote>to SQL</quote>関数では、型を言語からSQL環境へと変換します。
この関数は、その言語で記述された関数の戻り値で呼び出されます。
     </para>
    </listitem>
   </itemizedlist>
<!--
   It is not necessary to provide both of these functions.  If one is not
   specified, the language-specific default behavior will be used if
   necessary.  (To prevent a transformation in a certain direction from
   happening at all, you could also write a transform function that always
   errors out.)
-->
これらの関数を両方とも提供する必要はありません。
一方が指定されなければ、必要な時はその言語独自のデフォルトの動作が使われます。
（ある方向への変換がまったく起きないようにするためには、必ずエラーを発生させる変換関数を作成することもできます。）
  </para>

  <para>
<!--
   To be able to create a transform, you must own and
   have <literal>USAGE</literal> privilege on the type, have
   <literal>USAGE</literal> privilege on the language, and own and
   have <literal>EXECUTE</literal> privilege on the from-SQL and to-SQL
   functions, if specified.
-->
変換を作成するには、その型を所有し、その<literal>USAGE</literal>権限があること、言語の<literal>USAGE</literal>権限があること、from-SQL関数あるいはto-SQL関数を指定する場合は、それらを所有し、その<literal>EXECUTE</literal>権限があることが必要です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

   <variablelist>
    <varlistentry>
     <term><replaceable>type_name</replaceable></term>

     <listitem>
      <para>
<!--
       The name of the data type of the transform.
-->
変換の対象となるデータ型の名前です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>lang_name</replaceable></term>

     <listitem>
      <para>
<!--
       The name of the language of the transform.
-->
変換の対象となる言語の名前です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>from_sql_function_name</replaceable>(<replaceable>argument_type</replaceable> [, ...])</term>

     <listitem>
      <para>
<!--
       The name of the function for converting the type from the SQL
       environment to the language.  It must take one argument of
       type <type>internal</type> and return type <type>internal</type>.  The
       actual argument will be of the type for the transform, and the function
       should be coded as if it were.  (But it is not allowed to declare an
       SQL-level function function returning <type>internal</type> without at
       least one argument of type <type>internal</type>.)  The actual return
       value will be something specific to the language implementation.
-->
型をSQL環境から言語に変換する関数の名前です。
<type>internal</type>型の引数を1つとり、<type>internal</type>型の値を戻します。
実引数は変換される型になり、関数はそうであるとしてコーディングされます。
（しかし、少なくとも1つの<type>internal</type>型の引数がなければ、<type>internal</type>を戻すSQLレベルの関数を宣言することができません。）
実際の戻り値は、言語の実装に依存したものになります。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>to_sql_function_name</replaceable>(<replaceable>argument_type</replaceable> [, ...])</term>

     <listitem>
      <para>
<!--
       The name of the function for converting the type from the language to
       the SQL environment.  It must take one argument of type
       <type>internal</type> and return the type that is the type for the
       transform.  The actual argument value will be something specific to the
       language implementation.
-->
型を言語からSQL環境に変換する関数の名前です。
<type>internal</type>型の引数を1つとり、変換の型であるデータ型を戻します。
実引数の値は言語の実装に依存したものになります。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
 </refsect1>

 <refsect1 id="sql-createtransform-notes">
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   Use <xref linkend="sql-droptransform"> to remove transforms.
-->
変換を削除するには<xref linkend="sql-droptransform">を使います。
  </para>
 </refsect1>

 <refsect1 id="sql-createtransform-examples">
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   To create a transform for type <type>hstore</type> and language
   <literal>plpythonu</literal>, first set up the type and the language:
-->
<type>hstore</type>型で言語<literal>plpythonu</literal>の変換を作成するため、まず以下のように型と言語を設定します。
<programlisting>
CREATE TYPE hstore ...;

CREATE LANGUAGE plpythonu ...;
</programlisting>
   Then create the necessary functions:
<programlisting>
CREATE FUNCTION hstore_to_plpython(val internal) RETURNS internal
LANGUAGE C STRICT IMMUTABLE
AS ...;

CREATE FUNCTION plpython_to_hstore(val internal) RETURNS hstore
LANGUAGE C STRICT IMMUTABLE
AS ...;
</programlisting>
<!--
   And finally create the transform to connect them all together:
-->
そして最後に、それらを互いに接続する変換を以下のように作成します。
<programlisting>
CREATE TRANSFORM FOR hstore LANGUAGE plpythonu (
    FROM SQL WITH FUNCTION hstore_to_plpython(internal),
    TO SQL WITH FUNCTION plpython_to_hstore(internal)
);
</programlisting>
<!--
   In practice, these commands would be wrapped up in extensions.
-->
現実には、これらのコマンドは拡張の中にまとめられているでしょう。
  </para>

  <para>
<!--
   The <filename>contrib</filename> section contains a number of extensions
   that provide transforms, which can serve as real-world examples.
-->
<filename>contrib</filename>の下には変換を提供するいくつかの拡張が含まれており、それらは現実世界での例となります。
  </para>
 </refsect1>

 <refsect1 id="sql-createtransform-compat">
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   This form of <command>CREATE TRANSFORM</command> is a
   <productname>PostgreSQL</productname> extension.  There is a <command>CREATE
   TRANSFORM</command> command in the <acronym>SQL</acronym> standard, but it
   is for adapting data types to client languages.  That usage is not supported
   by <productname>PostgreSQL</productname>.
-->
この構文の<command>CREATE TRANSFORM</command>は<productname>PostgreSQL</productname>の拡張です。
標準<acronym>SQL</acronym>には<command>CREATE TRANSFORM</command>コマンドがありますが、それはデータ型をクライアントの言語に適合させるためのものです。
その使用法は<productname>PostgreSQL</productname>ではサポートされていません。
  </para>
 </refsect1>

 <refsect1 id="sql-createtransform-seealso">
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <para>
   <xref linkend="sql-createfunction">,
   <xref linkend="sql-createlanguage">,
   <xref linkend="sql-createtype">,
   <xref linkend="sql-droptransform">
  </para>
 </refsect1>

</refentry>
